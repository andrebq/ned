// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Line
	LineList
	BufferList
	BufferIdentity
	BufferQuery
	PingMessage
	PongMessage
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Line struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents string `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	Number   int32  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
}

func (m *Line) Reset()                    { *m = Line{} }
func (m *Line) String() string            { return proto.CompactTextString(m) }
func (*Line) ProtoMessage()               {}
func (*Line) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Line) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Line) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func (m *Line) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type LineList struct {
	Lines []*Line `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
}

func (m *LineList) Reset()                    { *m = LineList{} }
func (m *LineList) String() string            { return proto.CompactTextString(m) }
func (*LineList) ProtoMessage()               {}
func (*LineList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LineList) GetLines() []*Line {
	if m != nil {
		return m.Lines
	}
	return nil
}

type BufferList struct {
	Buffers []*BufferIdentity `protobuf:"bytes,1,rep,name=buffers" json:"buffers,omitempty"`
}

func (m *BufferList) Reset()                    { *m = BufferList{} }
func (m *BufferList) String() string            { return proto.CompactTextString(m) }
func (*BufferList) ProtoMessage()               {}
func (*BufferList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BufferList) GetBuffers() []*BufferIdentity {
	if m != nil {
		return m.Buffers
	}
	return nil
}

type BufferIdentity struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *BufferIdentity) Reset()                    { *m = BufferIdentity{} }
func (m *BufferIdentity) String() string            { return proto.CompactTextString(m) }
func (*BufferIdentity) ProtoMessage()               {}
func (*BufferIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BufferIdentity) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type BufferQuery struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *BufferQuery) Reset()                    { *m = BufferQuery{} }
func (m *BufferQuery) String() string            { return proto.CompactTextString(m) }
func (*BufferQuery) ProtoMessage()               {}
func (*BufferQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BufferQuery) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type PingMessage struct {
	Nonce    string `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`
	UnixNano int64  `protobuf:"varint,2,opt,name=unixNano" json:"unixNano,omitempty"`
}

func (m *PingMessage) Reset()                    { *m = PingMessage{} }
func (m *PingMessage) String() string            { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()               {}
func (*PingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PingMessage) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *PingMessage) GetUnixNano() int64 {
	if m != nil {
		return m.UnixNano
	}
	return 0
}

type PongMessage struct {
	Nonce        string `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`
	PingUnixNano int64  `protobuf:"varint,2,opt,name=pingUnixNano" json:"pingUnixNano,omitempty"`
	PongUnixNano int64  `protobuf:"varint,3,opt,name=pongUnixNano" json:"pongUnixNano,omitempty"`
}

func (m *PongMessage) Reset()                    { *m = PongMessage{} }
func (m *PongMessage) String() string            { return proto.CompactTextString(m) }
func (*PongMessage) ProtoMessage()               {}
func (*PongMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PongMessage) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *PongMessage) GetPingUnixNano() int64 {
	if m != nil {
		return m.PingUnixNano
	}
	return 0
}

func (m *PongMessage) GetPongUnixNano() int64 {
	if m != nil {
		return m.PongUnixNano
	}
	return 0
}

func init() {
	proto.RegisterType((*Line)(nil), "api.Line")
	proto.RegisterType((*LineList)(nil), "api.LineList")
	proto.RegisterType((*BufferList)(nil), "api.BufferList")
	proto.RegisterType((*BufferIdentity)(nil), "api.BufferIdentity")
	proto.RegisterType((*BufferQuery)(nil), "api.BufferQuery")
	proto.RegisterType((*PingMessage)(nil), "api.PingMessage")
	proto.RegisterType((*PongMessage)(nil), "api.PongMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Buffers service

type BuffersClient interface {
	GetContent(ctx context.Context, in *BufferIdentity, opts ...grpc.CallOption) (*LineList, error)
	WatchLines(ctx context.Context, in *BufferIdentity, opts ...grpc.CallOption) (Buffers_WatchLinesClient, error)
}

type buffersClient struct {
	cc *grpc.ClientConn
}

func NewBuffersClient(cc *grpc.ClientConn) BuffersClient {
	return &buffersClient{cc}
}

func (c *buffersClient) GetContent(ctx context.Context, in *BufferIdentity, opts ...grpc.CallOption) (*LineList, error) {
	out := new(LineList)
	err := grpc.Invoke(ctx, "/api.Buffers/GetContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buffersClient) WatchLines(ctx context.Context, in *BufferIdentity, opts ...grpc.CallOption) (Buffers_WatchLinesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Buffers_serviceDesc.Streams[0], c.cc, "/api.Buffers/WatchLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &buffersWatchLinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Buffers_WatchLinesClient interface {
	Recv() (*Line, error)
	grpc.ClientStream
}

type buffersWatchLinesClient struct {
	grpc.ClientStream
}

func (x *buffersWatchLinesClient) Recv() (*Line, error) {
	m := new(Line)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Buffers service

type BuffersServer interface {
	GetContent(context.Context, *BufferIdentity) (*LineList, error)
	WatchLines(*BufferIdentity, Buffers_WatchLinesServer) error
}

func RegisterBuffersServer(s *grpc.Server, srv BuffersServer) {
	s.RegisterService(&_Buffers_serviceDesc, srv)
}

func _Buffers_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuffersServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Buffers/GetContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuffersServer).GetContent(ctx, req.(*BufferIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Buffers_WatchLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BufferIdentity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuffersServer).WatchLines(m, &buffersWatchLinesServer{stream})
}

type Buffers_WatchLinesServer interface {
	Send(*Line) error
	grpc.ServerStream
}

type buffersWatchLinesServer struct {
	grpc.ServerStream
}

func (x *buffersWatchLinesServer) Send(m *Line) error {
	return x.ServerStream.SendMsg(m)
}

var _Buffers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Buffers",
	HandlerType: (*BuffersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContent",
			Handler:    _Buffers_GetContent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchLines",
			Handler:       _Buffers_WatchLines_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// Client API for Editor service

type EditorClient interface {
	GetBuffers(ctx context.Context, in *BufferQuery, opts ...grpc.CallOption) (*BufferList, error)
}

type editorClient struct {
	cc *grpc.ClientConn
}

func NewEditorClient(cc *grpc.ClientConn) EditorClient {
	return &editorClient{cc}
}

func (c *editorClient) GetBuffers(ctx context.Context, in *BufferQuery, opts ...grpc.CallOption) (*BufferList, error) {
	out := new(BufferList)
	err := grpc.Invoke(ctx, "/api.Editor/GetBuffers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Editor service

type EditorServer interface {
	GetBuffers(context.Context, *BufferQuery) (*BufferList, error)
}

func RegisterEditorServer(s *grpc.Server, srv EditorServer) {
	s.RegisterService(&_Editor_serviceDesc, srv)
}

func _Editor_GetBuffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditorServer).GetBuffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Editor/GetBuffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditorServer).GetBuffers(ctx, req.(*BufferQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Editor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Editor",
	HandlerType: (*EditorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBuffers",
			Handler:    _Editor_GetBuffers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for Session service

type SessionClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PongMessage, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PongMessage, error) {
	out := new(PongMessage)
	err := grpc.Invoke(ctx, "/api.Session/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	Ping(context.Context, *PingMessage) (*PongMessage, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Session/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Session_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x4b, 0xeb, 0x30,
	0x18, 0xc5, 0xe9, 0xba, 0x6e, 0xeb, 0xd7, 0x7b, 0x77, 0x2f, 0xb9, 0x17, 0x29, 0x7d, 0xb1, 0x04,
	0x85, 0xa2, 0x38, 0x47, 0xc5, 0x07, 0xf1, 0x41, 0x98, 0x88, 0x28, 0x53, 0x66, 0x45, 0x04, 0xdf,
	0xba, 0x35, 0xdb, 0xc2, 0x34, 0x29, 0x4d, 0x0a, 0xdb, 0x7f, 0x2f, 0x49, 0xb3, 0xad, 0x83, 0x81,
	0x6f, 0x3d, 0x27, 0xe7, 0xe4, 0x6b, 0x7e, 0x09, 0xb8, 0x69, 0x4e, 0x7b, 0x79, 0xc1, 0x25, 0x47,
	0x76, 0x9a, 0x53, 0xfc, 0x08, 0xcd, 0x21, 0x65, 0x04, 0x75, 0xa1, 0x41, 0x33, 0xdf, 0x0a, 0xad,
	0xc8, 0x4e, 0x1a, 0x34, 0x43, 0x01, 0x74, 0x26, 0x9c, 0x49, 0xc2, 0xa4, 0xf0, 0x1b, 0xa1, 0x15,
	0xb9, 0xc9, 0x46, 0xa3, 0x03, 0x68, 0xb1, 0xf2, 0x6b, 0x4c, 0x0a, 0xdf, 0x0e, 0xad, 0xc8, 0x49,
	0x8c, 0xc2, 0xa7, 0xd0, 0x51, 0x7b, 0x0d, 0xa9, 0x90, 0xe8, 0x10, 0x9c, 0x4f, 0xca, 0x88, 0xf0,
	0xad, 0xd0, 0x8e, 0xbc, 0xd8, 0xed, 0xa9, 0xb9, 0x6a, 0x35, 0xa9, 0x7c, 0x7c, 0x0d, 0x30, 0x28,
	0xa7, 0x53, 0x52, 0xe8, 0xf8, 0x19, 0xb4, 0xc7, 0x5a, 0xad, 0x0b, 0xff, 0x74, 0xa1, 0x4a, 0x3c,
	0x64, 0x84, 0x49, 0x2a, 0x57, 0xc9, 0x3a, 0x83, 0x8f, 0xa0, 0xbb, 0xbb, 0x84, 0x10, 0x34, 0xf3,
	0x54, 0xce, 0xf5, 0x09, 0xdc, 0x44, 0x7f, 0xe3, 0x63, 0xf0, 0xaa, 0xd4, 0x4b, 0x49, 0x8a, 0x95,
	0xfa, 0xed, 0xbc, 0x20, 0x53, 0xba, 0x34, 0x21, 0xa3, 0xf0, 0x0d, 0x78, 0x23, 0xca, 0x66, 0x4f,
	0x44, 0x88, 0x74, 0x46, 0xd0, 0x7f, 0x70, 0x18, 0x67, 0x13, 0x62, 0x52, 0x95, 0x50, 0x3c, 0x4a,
	0x46, 0x97, 0xcf, 0x29, 0xe3, 0x9a, 0x87, 0x9d, 0x6c, 0x34, 0x5e, 0x80, 0x37, 0xe2, 0x3f, 0x6d,
	0x80, 0xe1, 0x57, 0x4e, 0xd9, 0xec, 0x6d, 0x77, 0x93, 0x1d, 0x4f, 0x67, 0x78, 0x2d, 0x63, 0x9b,
	0x4c, 0xcd, 0x8b, 0x17, 0xd0, 0xae, 0x0e, 0x25, 0x50, 0x1f, 0xe0, 0x9e, 0xc8, 0xdb, 0xea, 0x5a,
	0xd0, 0x3e, 0x62, 0xc1, 0xef, 0x0d, 0x77, 0x8d, 0xb9, 0x07, 0xf0, 0x9e, 0xca, 0xc9, 0x5c, 0x19,
	0x62, 0x7f, 0x63, 0x7b, 0x53, 0x7d, 0x2b, 0xbe, 0x82, 0xd6, 0x5d, 0x46, 0x25, 0x2f, 0xd0, 0xb9,
	0x9e, 0xb5, 0x9e, 0xfc, 0xb7, 0xd6, 0xd4, 0x70, 0x83, 0x3f, 0x35, 0x47, 0x8d, 0x8a, 0x2f, 0xa1,
	0xfd, 0x4a, 0x84, 0xa0, 0x9c, 0xa1, 0x13, 0x68, 0x2a, 0xc0, 0xa6, 0x55, 0x63, 0x1d, 0x18, 0x67,
	0x0b, 0x6f, 0xe0, 0x7c, 0xa8, 0x67, 0x39, 0x6e, 0xe9, 0x27, 0x7a, 0xf1, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0xe8, 0x34, 0x4e, 0xaf, 0x02, 0x00, 0x00,
}
